/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Everforest API 文件
 * 北14森森不息-露營活動票務系統的 API 文件
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type PostAuthRegisterBody = {
  username: string;
  firstname: string;
  lastname: string;
  email: string;
  phone: string;
  password: string;
};

export type PostAuthRegister201 = {
  /** 結果 */
  status?: string;
  /** 回傳訊息 */
  message?: string;
};

export type PostAuthRegister400 = {
  /** 結果 */
  status?: string;
  /** 回傳訊息（欄位錯誤或格式錯誤） */
  message?: string;
};

export type PostAuthRegister409 = {
  /** 結果 */
  status?: string;
  /** 回傳訊息（重複註冊） */
  message?: string;
};

export type PostAuthRegister500 = {
  /** 結果 */
  status?: string;
  /** 回傳訊息 */
  message?: string;
};

export type PostAuthLoginBody = {
  email: string;
  password: string;
};

export type PostAuthLogin200DataMemberInfo = {
  id?: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  role?: string;
};

export type PostAuthLogin200Data = {
  member_info?: PostAuthLogin200DataMemberInfo;
};

export type PostAuthLogin200 = {
  status?: string;
  message?: string;
  data?: PostAuthLogin200Data;
};

export type PostAuthLogin400 = {
  status?: string;
  message?: string;
};

export type PostAuthLogin401 = {
  status?: string;
  message?: string;
};

export type PostAuthLogin500 = {
  status?: string;
  message?: string;
};

export type GetAuthCheck200DataMemberInfoRole = typeof GetAuthCheck200DataMemberInfoRole[keyof typeof GetAuthCheck200DataMemberInfoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAuthCheck200DataMemberInfoRole = {
  member: 'member',
  host: 'host',
  admin: 'admin',
} as const;

export type GetAuthCheck200DataMemberInfo = {
  id?: string;
  username?: string;
  email?: string;
  role?: GetAuthCheck200DataMemberInfoRole;
};

export type GetAuthCheck200Data = {
  member_info?: GetAuthCheck200DataMemberInfo;
};

export type GetAuthCheck200 = {
  status?: string;
  message?: string;
  data?: GetAuthCheck200Data;
};

export type PostAuthRefresh200DataMemberInfoRole = typeof PostAuthRefresh200DataMemberInfoRole[keyof typeof PostAuthRefresh200DataMemberInfoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthRefresh200DataMemberInfoRole = {
  member: 'member',
  host: 'host',
  admin: 'admin',
} as const;

export type PostAuthRefresh200DataMemberInfo = {
  id?: string;
  username?: string;
  email?: string;
  role?: PostAuthRefresh200DataMemberInfoRole;
};

export type PostAuthRefresh200Data = {
  member_info?: PostAuthRefresh200DataMemberInfo;
};

export type PostAuthRefresh200 = {
  status?: string;
  message?: string;
  data?: PostAuthRefresh200Data;
};

export type PostAuthLogout200 = {
  status?: string;
  message?: string;
};

export type PutAuthResetPasswordBody = {
  /** 新密碼（需符合密碼規則） */
  newPassword: string;
};

export type PutAuthResetPassword200 = {
  status?: string;
  message?: string;
};

export type PutAuthResetPassword400 = {
  status?: string;
  message?: string;
};

export type PostAuthForgotPasswordBody = {
  /** 使用者註冊時的 email */
  email: string;
};

export type PostAuthForgotPassword200 = {
  status?: string;
  message?: string;
};

export type PostAuthForgotPassword400 = {
  status?: string;
  message?: string;
};

export type PostAuthForgotPassword429 = {
  status?: string;
  message?: string;
};

export type PostAuthResetPasswordByTokenBody = {
  /** 來自 email 的 token（resetId） */
  token: string;
  /** 新密碼，需符合密碼強度規則（8～16 字，包含英文與數字） */
  newPassword: string;
};

export type PostAuthResetPasswordByToken200 = {
  status?: string;
  message?: string;
};

export type PostAuthResetPasswordByToken400 = {
  status?: string;
  message?: string;
};

/**
 * 透過網站註冊會員帳號
 * @summary 會員註冊
 */
export const postAuthRegister = <TData = AxiosResponse<PostAuthRegister201>>(
    postAuthRegisterBody: PostAuthRegisterBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/register`,
      postAuthRegisterBody,options
    );
  }

/**
 * 會員登入成功後，伺服器會回傳會員資訊，並透過 `Set-Cookie` 寫入兩個 Token 至瀏覽器：

- `access_token`：短效存取憑證（15 分鐘）
- `refresh_token`：長效更新憑證（7 天）

📌 這兩個 Cookie 都設定為：
- `HttpOnly`（JavaScript 無法存取，避免 XSS）
- `Secure`（僅 HTTPS 傳送）
- `SameSite=Strict`（防止 CSRF）

⚠️ **前端請在發送請求時加上 `credentials: include`，以攜帶 Cookie。**

 * @summary 會員登入
 */
export const postAuthLogin = <TData = AxiosResponse<PostAuthLogin200>>(
    postAuthLoginBody: PostAuthLoginBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/login`,
      postAuthLoginBody,options
    );
  }

/**
 * 驗證會員登入狀態，驗證 access_token 是否有效，並回傳目前登入的會員資料。需附帶 HttpOnly cookie。
 * @summary 檢查登入狀態
 */
export const getAuthCheck = <TData = AxiosResponse<GetAuthCheck200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/check`,options
    );
  }

/**
 * 使用 refresh_token（HttpOnly cookie）取得新的 access_token，並自動寫入 cookie。成功會回傳會員資料。
 * @summary 刷新 Access Token
 */
export const postAuthRefresh = <TData = AxiosResponse<PostAuthRefresh200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/refresh`,undefined,options
    );
  }

/**
 * 清除 access_token 與 refresh_token 的 cookie，結束登入狀態。
 * @summary 會員登出
 */
export const postAuthLogout = <TData = AxiosResponse<PostAuthLogout200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/logout`,undefined,options
    );
  }

/**
 * 已登入會員透過此 API 重設密碼。前端應負責確認 newPassword 與 confirmPassword 是否一致。
 * @summary 重設密碼（需登入）
 */
export const putAuthResetPassword = <TData = AxiosResponse<PutAuthResetPassword200>>(
    putAuthResetPasswordBody: PutAuthResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/auth/reset-password`,
      putAuthResetPasswordBody,options
    );
  }

/**
 * 透過 Google OAuth 重導使用者至 Google 授權頁面，使用者授權後將自動跳轉至 callback URL。
 * @summary 透過 Google 登入（OAuth 2.0）
 */
export const getApiV1AuthOauthGoogle = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/auth/oauth/google`,options
    );
  }

/**
 * Google 授權完成後自動導向此 callback。Passport 將透過授權碼交換 access token，
並取得使用者資訊，進行登入或註冊處理，最終將使用者導回前端頁面。

 * @summary Google OAuth 登入 callback
 */
export const getApiV1AuthOauthGoogleCallback = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/auth/oauth/google/callback`,options
    );
  }

/**
 * 使用者在忘記密碼時輸入 email，系統將寄送一封內含重設連結（含 resetId token）的 email。<br /> 此連結有效時間約 15 分鐘。

 * @summary 忘記密碼 - 寄送重設連結
 */
export const postAuthForgotPassword = <TData = AxiosResponse<PostAuthForgotPassword200>>(
    postAuthForgotPasswordBody: PostAuthForgotPasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/forgot-password`,
      postAuthForgotPasswordBody,options
    );
  }

/**
 * 使用者忘記密碼，透過 email 中收到的 token，輸入新密碼進行重設。<br /> 前端需從連結中擷取 resetId，作為 token 一併送出。

 * @summary 忘記密碼 - 使用 token 重設密碼
 */
export const postAuthResetPasswordByToken = <TData = AxiosResponse<PostAuthResetPasswordByToken200>>(
    postAuthResetPasswordByTokenBody: PostAuthResetPasswordByTokenBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/reset-password-by-token`,
      postAuthResetPasswordByTokenBody,options
    );
  }

export type PostAuthRegisterResult = AxiosResponse<PostAuthRegister201>
export type PostAuthLoginResult = AxiosResponse<PostAuthLogin200>
export type GetAuthCheckResult = AxiosResponse<GetAuthCheck200>
export type PostAuthRefreshResult = AxiosResponse<PostAuthRefresh200>
export type PostAuthLogoutResult = AxiosResponse<PostAuthLogout200>
export type PutAuthResetPasswordResult = AxiosResponse<PutAuthResetPassword200>
export type GetApiV1AuthOauthGoogleResult = AxiosResponse<unknown>
export type GetApiV1AuthOauthGoogleCallbackResult = AxiosResponse<unknown>
export type PostAuthForgotPasswordResult = AxiosResponse<PostAuthForgotPassword200>
export type PostAuthResetPasswordByTokenResult = AxiosResponse<PostAuthResetPasswordByToken200>
