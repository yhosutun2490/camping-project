/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Everforest API 文件
 * 北14森森不息-露營活動票務系統的 API 文件
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type PostApiV1MemberOrdersOrderIdPayment200Data = {
  html?: string;
};

export type PostApiV1MemberOrdersOrderIdPayment200 = {
  status?: string;
  message?: string;
  data?: PostApiV1MemberOrdersOrderIdPayment200Data;
};

export type PostApiV1MemberOrdersOrderIdPayment400 = {
  status?: string;
  message?: string;
};

export type PostApiV1MemberOrdersOrderIdPayment404 = {
  status?: string;
  message?: string;
};

export type PostApiV1MemberOrdersOrderIdPayment500 = {
  status?: string;
  message?: string;
};

export type PostApiV1MemberOrdersOrderIdPaymentCallbackBody = {
  CheckMacValue?: string;
  MerchantTradeNo?: string;
  PaymentType?: string;
  TradeAmt?: number;
  TradeNo?: string;
  PaymentDate?: string;
  RtnCode?: string;
};

/**
 * 此 API 用於處理訂單的付款，會生成一個付款表單並回傳給前端，前端可使用該表單進行付款。
需要身份驗證，使用者必須先登入。

 * @summary 處理訂單付款
 */
export const postApiV1MemberOrdersOrderIdPayment = <TData = AxiosResponse<PostApiV1MemberOrdersOrderIdPayment200>>(
    orderId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/v1/member/orders/${orderId}/payment`,undefined,options
    );
  }

/**
 * 此 API 接收綠界的付款結果通知。系統會驗證資料正確性（如 CheckMacValue），
並根據 `RtnCode` 決定是否更新訂單與付款紀錄。

綠界要求系統回傳：
- `1|OK`：處理成功

 * @summary 綠界付款回調通知 (ECPay Payment Callback)
 */
export const postApiV1MemberOrdersOrderIdPaymentCallback = <TData = AxiosResponse<string>>(
    orderId: string,
    postApiV1MemberOrdersOrderIdPaymentCallbackBody: PostApiV1MemberOrdersOrderIdPaymentCallbackBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formUrlEncoded = new URLSearchParams();
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.CheckMacValue !== undefined) {
 formUrlEncoded.append(`CheckMacValue`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.CheckMacValue)
 }
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.MerchantTradeNo !== undefined) {
 formUrlEncoded.append(`MerchantTradeNo`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.MerchantTradeNo)
 }
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.PaymentType !== undefined) {
 formUrlEncoded.append(`PaymentType`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.PaymentType)
 }
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.TradeAmt !== undefined) {
 formUrlEncoded.append(`TradeAmt`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.TradeAmt.toString())
 }
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.TradeNo !== undefined) {
 formUrlEncoded.append(`TradeNo`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.TradeNo)
 }
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.PaymentDate !== undefined) {
 formUrlEncoded.append(`PaymentDate`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.PaymentDate)
 }
if(postApiV1MemberOrdersOrderIdPaymentCallbackBody.RtnCode !== undefined) {
 formUrlEncoded.append(`RtnCode`, postApiV1MemberOrdersOrderIdPaymentCallbackBody.RtnCode)
 }

    return axios.post(
      `/api/v1/member/orders/${orderId}/payment-callback`,
      formUrlEncoded,options
    );
  }

export type PostApiV1MemberOrdersOrderIdPaymentResult = AxiosResponse<PostApiV1MemberOrdersOrderIdPayment200>
export type PostApiV1MemberOrdersOrderIdPaymentCallbackResult = AxiosResponse<string>
